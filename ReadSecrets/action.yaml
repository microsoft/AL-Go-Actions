name: Read Secrets
author: Microsoft Corporation
inputs:
  shell:
    description: Shell in which you want to run the action (powershell or pwsh)
    required: false
    default: powershell
  gitHubSecrets:
    description: All GitHub Secrets in compressed JSON format
    required: true
  getSecrets:
    description: Comma-separated list of Secrets to get. Secrets preceded by an asterisk are returned encrypted
    required: true
  useGhTokenWorkflowForPush:
    description: Determines whether you want to use the GhTokenWorkflow secret for TokenForPush
    required: false
    default: 'false'
outputs:
  Secrets:
    description: All requested secrets in compressed JSON format
    value: ${{ steps.ReadSecrets.outputs.Secrets }}
  TokenForPush:
    description: The token to use when workflows are pushing changes (either directly, or via pull requests).
    value: ${{ steps.ReadSecrets.outputs.TokenForPush }}
runs:
  using: composite
  steps:
    - name: run
      shell: ${{ inputs.shell }}
      id: ReadSecrets
      env:
        _getSecrets: ${{ inputs.getSecrets }}
        _useGhTokenWorkflowForPush: ${{ inputs.useGhTokenWorkflowForPush }}
      run: |
        $errorActionPreference = "Stop"; $ProgressPreference = "SilentlyContinue"; Set-StrictMode -Version 2.0
        try {
          ${{ github.action_path }}/ReadSecrets.ps1 -gitHubSecrets '${{ inputs.gitHubSecrets }}' -getSecrets $ENV:_getSecrets -useGhTokenWorkflowForPush $ENV:_useGhTokenWorkflowForPush
        }
        catch {
          Write-Host "::ERROR::Unexpected error when running action. Error Message: $($_.Exception.Message.Replace("`r",'').Replace("`n",' ')), StackTrace: $($_.ScriptStackTrace.Replace("`r",'').Replace("`n",' <- '))";
          exit 1
        }
branding:
  icon: terminal
  color: blue
